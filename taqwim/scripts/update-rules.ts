/* eslint-disable unicorn/prefer-json-parse-buffer */

/**
 * This file monitors the rules folder and performs the following actions:
 * - Updates the rules index file
 * - Updates the rules documentation
 * - Update schema with rules and their options
 */
import { pathToFileURL } from 'node:url';

import * as path from 'node:path';
import * as fs from 'node:fs';
import fse from 'fs-extra';
import { globbySync } from 'globby';
import { camelCase } from 'change-case';
import cliProgress from 'cli-progress';
import chalk from 'chalk';
import { UpdateRulesDocumentation } from './update-docs';

// create progress bar defaults
const progressBar = new cliProgress.SingleBar({
	format: `Updating Rules  ${chalk.greenBright('{bar}')}    ${chalk.magenta('{percentage}%')}    ({value}/{total})`,
	barCompleteChar: '>',
	barIncompleteChar: '-',
	hideCursor: true,
});

const progressBarSchema = new cliProgress.SingleBar({
	format: `Updating Schema ${chalk.cyanBright('{bar}')}    ${chalk.magenta('{percentage}%')}    ({value}/{total})`,
	barCompleteChar: '>',
	barIncompleteChar: '-',
	hideCursor: true,
});

const getRulesFiles = (cwd = './src/rules') => {
	return globbySync('**/*.ts', {
		expandDirectories: {
			extensions: ['ts'],
		},
		absolute: false,
		gitignore: true,
		ignore: ['**/index.ts'],
		cwd,
	});
};

/**
 * Get list of rules exports
 *
 * @return {string[]} List of rules exports
 */
const getRulesExports = () => {
	const rulesFiles = getRulesFiles();

	progressBar.start(rulesFiles.length, 0);
	return rulesFiles.map((file) => {
		// convert slash to dash and remove extension
		const ruleName = file.replaceAll('/', '-').replace('.ts', '');
		const fileName = file.replace('.ts', '.js');

		progressBar.increment();
		return `export { default as ${camelCase(ruleName)} } from '@taqwim/rules/${fileName}';`;
	});
};

/**
 * Update schema with rules and their options
 */
const updateRuleSchema = async () => {
	// import all rules
	const builtInRules = getRulesFiles();
	const pluginRules = getRulesFiles('./src/plugins');
	const rulesFiles = [...builtInRules, ...pluginRules];

	// const rulesFiles = getRulesFiles();
	const rulesList: Record<string, unknown> = {};

	progressBarSchema.start(rulesFiles.length, 0);

	await rulesFiles.reduce(async (accumulator: Promise<any>, ruleFile) => {
		const filePath = path.posix.join('.', 'src', 'rules', ruleFile);

		progressBarSchema.increment();

		if (!fse.existsSync(filePath)) {
			return accumulator;
		}

		// import file and get rule name
		const rule = await import(pathToFileURL(filePath).href);
		const { meta, name, defaultOptions } = rule.default();
		const ruleName = `${meta.preset}/${name}`;

		let properties = {
			severity: {
				$ref: '#/definitions/severity',
			},
		};

		if (defaultOptions) {
			properties = {
				...properties,
				...defaultOptions,
			};
		}

		rulesList[ruleName] = {
			description: meta.description,
			oneOf: [
				{
					$ref: '#/definitions/severity',
				},
				{
					type: 'object',
					additionalProperties: false,
					properties,
				},
			],
		};

		return accumulator;
	}, Promise.resolve());

	// load schema head
	const schemaHeadContent = await fse.readFile('../schema-head.json', 'utf8');

	// Parse and update schema
	const schema = JSON.parse(schemaHeadContent);

	// Sort rules alphabetically
	const sortedRules = Object.keys(rulesList).sort();
	const sortedRulesList: Record<string, unknown> = {};
	sortedRules.forEach((rule) => {
		sortedRulesList[rule] = rulesList[rule];
	});

	schema.properties.rules.properties = sortedRulesList;

	// Write the updated schema to schema file
	fse.writeJson('../schema.json', schema, { spaces: '\t' });

	progressBarSchema.stop();
};

// update rules and docs
const exports = getRulesExports();
const heading = '// This file is automatically generated by update-rules.ts';
exports.unshift(heading);
fs.writeFileSync('./src/rules/index.ts', `${exports.join('\n')}`);

progressBar.stop();
updateRuleSchema();

const updateBuiltinRulesDocs = new UpdateRulesDocumentation('rules', getRulesFiles());
await updateBuiltinRulesDocs.start(true);

const updatePluginRulesDocs = new UpdateRulesDocumentation('plugins', getRulesFiles('./src/plugins'));
await updatePluginRulesDocs.start();